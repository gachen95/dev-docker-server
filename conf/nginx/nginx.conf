#Defines which Linux system user will own and run the Nginx server
user  nginx;

#Referes to single threaded process. Generally set to be equal to the number of CPUs or cores.
worker_processes  1;

#Specifies the file where server logs. 
error_log  /var/log/nginx/error.log warn;

#nginx will write its master process ID(PID).
pid        /var/run/nginx.pid;

events {
    # worker_processes and worker_connections allows you to calculate maxclients value: 
    # max_clients = worker_processes * worker_connections
    worker_connections  1024;
}

http {

    # Hide nginx version information.
    server_tokens off;
  
    # anything written in /opt/nginx/conf/mime.types is interpreted as if written inside the http { } block
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
	
	# update charset_types due to updated mime.types
    #charset_types text/css text/plain text/vnd.wap.wml application/javascript application/json application/rss+xml application/xml;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

	# If serving locally stored static files, sendfile is essential to speed up the server,
    # But if using as reverse proxy one can deactivate it
    sendfile        on;
	
	 # works opposite to tcp_nodelay. Instead of optimizing delays, it optimizes the amount of data sent at once.
    #tcp_nopush     on;

	# timeout during which a keep-alive client connection will stay open.
    keepalive_timeout  65;

	# tells the server to use on-the-fly gzip compression.
    gzip on;
    gzip_disable "msie6";  #disable gzip compression when the client is Internet Explorer version 6, because that browser does not understand gzip compression.
	
	# Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;
    
    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    256;
    
    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;
    
    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;
    
    # Compress all output labeled with one of the following MIME-types.
    gzip_types
      application/atom+xml
      application/javascript
      application/json
      application/ld+json
      application/manifest+json
      application/rss+xml
      application/vnd.geo+json
      application/vnd.ms-fontobject
      application/x-font-ttf
      application/x-web-app-manifest+json
      application/xhtml+xml
      application/xml
      font/opentype
      image/bmp
      image/svg+xml
      image/x-icon
      text/cache-manifest
      text/css
      text/plain
      text/vcard
      text/vnd.rim.location.xloc
      text/vtt
      text/x-component
      text/x-cross-domain-policy;
    # text/html is always compressed by HttpGzipModule
    
    # This should be turned on if you are going to have pre-compressed copies (.gz) of
    # static files available. If not it should be left off as it will cause extra I/O
    # for the check. It is best if you enable this in a location{} block for
    # a specific directory, or on an individual server{} level.
    # gzip_static on;

    include /etc/nginx/conf.d/*.conf;
}
